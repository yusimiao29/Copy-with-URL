document.write("<script type='text/javascript' src='clipboard.min.js'></script>");  

var get_selection = function() {
    var selection = document.getSelection();
    // console.log(selection)
    var text = selection.toString();
    // console.log(text)
    var node = selection.getRangeAt(0).startContainer;
    // console.log(node)

    var uri = node.baseURI || document.documentURI;
    // console.log(uri)

    var parent = node.parentElement;
    // console.log(parent)

    var whiteSpace = (parent && window.getComputedStyle(parent)['white-space']);
    // console.log(whiteSpace)
    var index;
    var ext;
    var is_code = function(elem) {
        if (!elem) return false;

        // Is the element monospace?
        if (window.getComputedStyle(elem)['white-space'].toLowerCase() == 'pre') {
            return true;
        }

        // Is the element generated by CodeMirror?
        if (elem.className.toLowerCase().split(' ').indexOf('codemirror') >= 0) {
            return true;
        }

        return false;
    }
    var pre = is_code(parent);
    console.log(pre)

    var get_frag = function(parent) {
        var frag, sibling, nephew;

        if (!parent) {
            return null;
        }

        frag = parent.id || parent.name;

        if (frag) {
            return frag;
        }

        sibling = parent.previousSibling;

        while(sibling) {
            frag = sibling.id || sibling.name;

            if (frag) {
                return frag;
            }

            nephew = sibling.children && sibling.children[0];
            frag = nephew && (nephew.id || nephew.name);

            if (frag) {
                return frag;
            }

            sibling = sibling.previousSibling;
        }
    }
    var fileName;
    var orig_frag;
    var frag;

    // Remove the fragment from the url and find the better one only if the
    // original one was not semantically significant.
    index = uri.lastIndexOf('#');
    console.log(index)
    orig_frag = index >= 0 ? uri.substring(index + 1) : null;
    if (!orig_frag || orig_frag.indexOf('/') < 0) { // Assume the fragment is siginificant if it contains '/'.
        uri = index >= 0 ? uri.substring(0, index) : uri;
        while(!frag && parent) {
            frag = get_frag(parent);
            parent = parent.parentElement;
        }
    }

    // Get extension from the url
    index = uri.lastIndexOf('/');
    fileName = index >= 0 ? uri.substring(index + 1) : '';
    index = fileName.lastIndexOf('.');
    ext = index >= 0 ? fileName.substring(index + 1) : '';

    if (frag) {
        uri += '#' + frag;
    }

    return {
        text: text,
        uri: uri,
        pre: pre,
        ext: ext
    };
}

var ltrim_lines = function(str) {
    return str.replace(/^(\s*\n)*/, '');
}

var rtrim = function(str) {
    return str.replace(/[\s\n]*$/, '');
}


var copy_as_markdown_quot = function (args) {
    chrome.tabs.executeScript( {
          code: "(" + get_selection + ")();" 
    }, function(selections) {
        var text = rtrim(ltrim_lines(selections[0].text));
        var uri = selections[0].uri;
        var pre = selections[0].pre;
        var ext = selections[0].ext;
        if (text) {
            lines = text.split('\n');
            result = '';
            if (pre) result += '> ```' + ext + '\n';
            for (var i = 0; i < lines.length; i++) {
                result +=  lines[i] + '\n';
            }
            if (pre) result += '> ```\n'
            copyTextToClipboard(result,uri);
        }
    });
};

function copyTextToClipboard(text,uri) {
    var copyFrom,agent,body;

    copyFrom = document.createElement("a");
    copyFrom.setAttribute("id","target");
    copyFrom.setAttribute("href",uri);
    copyFrom.innerHTML = text;
    agent = document.createElement("button");
    body = document.getElementsByTagName('body')[0];
    body.appendChild(copyFrom);
    body.appendChild(agent);
    // 麻烦：无法传入'.btn'元素 我们可以创建一个btn作为代理
    var clipboard = new ClipboardJS(agent, {
        target: function() {
            return document.querySelector('#target');
        }
    });

    clipboard.on('success', function(e) {
        console.log(e);
    });

    clipboard.on('error', function(e) {
        console.log(e);
    });
    agent.click();
    // copyFrom.focus();
    // copyFrom.select();  // 问题所在 无法对copyFrom对象使用select()方法
    // document.execCommand('copy'); // 采用Clipboard.js方案
    body.removeChild(copyFrom);
    body.removeChild(agent);
    

}

chrome.contextMenus.create({
    title: "Copy with URL",
    contexts: ['selection'],
    onclick: copy_as_markdown_quot
    // onclick: copyTextToClipboard_self
});
